#!/bin/bash                             
#PBS -l nodes=1:ppn=4,mem=62gb,walltime=24:00:00
#PBS -m abe
#PBS -M sample_email@umn.edu
#PBS -N sample_name_analysis

working_dir=sample_path
script_path=scripts_location
table_path=tables_path
MYSQL_LOAD_WAIT=120
code_src=code_path

cd $working_dir

# Load modules
module load bwa
module load bowtie
module load picard-tools
module load samtools
module load R/3.1.1

_now=$(date +"%Y-%m-%d_%H-%M")

ls -1 $working_dir/completed.txt > /dev/null 2>&1
if [ "$?" = "0" ]; then
    echo "$working_dir/completed.txt exists"
else
    echo "Started a new run on $_now" >> $working_dir/completed.txt
fi

# Generate pileups for control
grep "control_pileup.sh" $working_dir/completed.txt > /dev/null 2>&1
if [ "$?" = "0" ]; then
    echo "control_pileup.sh already run"
else
    echo "Run control_pileup.sh"
    sh control_pileup.sh
    if [[ $? -ne 0 ]] ; then
        echo "Run control_pileup.sh failed" >&2
        exit 1
    else
        echo "control_pileup.sh" >> $working_dir/completed.txt
    fi
fi

# Generate pileups for sample
grep "sample_pileup.sh" $working_dir/completed.txt > /dev/null 2>&1
if [ "$?" = "0" ]; then
    echo "sample_pileup.sh already run"
else
    echo "Run sample_pileup.sh"
    sh sample_pileup.sh
    if [[ $? -ne 0 ]] ; then
	echo "Run sample_pileup.sh failed" >&2
	exit 1
    else
	echo "sample_pileup.sh" >> $working_dir/completed.txt
    fi
fi

grep "installed_mysql" $working_dir/completed.txt > /dev/null 2>&1
if [ "$?" = "0" ]; then
    echo "MySQL already installed"
else
# Untar MySQL source
    mkdir src
    cd src
    tar xzvf $code_src/mysql-5.6.24-linux-glibc2.5-x86_64.tar.gz
# Setup the mysql data directory install
    mkdir $working_dir/mysql
    cd $working_dir/src/mysql-5.6.24-linux-glibc2.5-x86_64/support-files
    cp $code_src/my.cnf my-default.cnf
    cd ..
    rm -rf *.cnf
    ./scripts/mysql_install_db -datadir=$working_dir/mysql/data
    if [[ $? -ne 0 ]] ; then
	echo "MySQL installation failed" >&2
	exit 1
    else
	cd $working_dir
	echo "installed_mysql" >> $working_dir/completed.txt
    fi
fi

# Alter PATH variable to know of mysql executables 
export PATH=$working_dir/bin:$working_dir/src/mysql-5.6.24-linux-glibc2.5-x86_64/bin:$PATH
BASE=$working_dir/mysql
mysql_socket=$BASE/thesock

mysqld --innodb-buffer-pool-size=40G --key-buffer-size=15G --innodb-log-file-size=5G \
--innodb_flush_log_at_trx_commit=2 --basedir=$BASE --datadir=$BASE/data --log-error=$BASE/data/mysql.err \
--pid-file=$BASE/mysql.pid --socket=$BASE/thesock --port=3306 \
--lc-messages-dir=$working_dir/src/mysql-5.6.24-linux-glibc2.5-x86_64/share/english --tmpdir=/scratch &

sleep $MYSQL_LOAD_WAIT

grep "base_tables_loaded" $working_dir/completed.txt > /dev/null 2>&1
if [ "$?" = "0" ]; then
    echo "base tables already loaded"
else
# CREATE DATABASE
    mysql --socket=$BASE/thesock -u root -e "CREATE DATABASE cnv;"
    
    echo "Load tables"
    mysql --socket=$BASE/thesock -u root cnv < $table_path/tumor_cnv.sql
    if [[ $? -ne 0 ]] ; then
	echo "MySQL base table loading failed" >&2
	exit 1
    else
	echo "base_tables_loaded" >> $working_dir/completed.txt
    fi
fi

grep "load_control.sql" $working_dir/completed.txt > /dev/null 2>&1
if [ "$?" = "0" ]; then
    echo "load_control.sql already run"
else
    echo "Run load_control.sql"
    mysql --socket=$BASE/thesock -u root cnv < load_control.sql
    if [[ $? -ne 0 ]] ; then
	echo "Run load_control.sql failed" >&2
	mysqladmin --socket=$BASE/thesock shutdown -u root
	exit 1
    else
	echo "load_control.sql" >> $working_dir/completed.txt
    fi
fi

grep "load_sample.sql" $working_dir/completed.txt > /dev/null 2>&1
if [ "$?" = "0" ]; then
    echo "load_sample.sql already run"
else
    echo "Run load_sample.sql"
    mysql --socket=$BASE/thesock -u root cnv < load_sample.sql
    if [[ $? -ne 0 ]] ; then
	echo "Run load_sample.sql failed" >&2
	mysqladmin --socket=$BASE/thesock shutdown -u root
	exit 1
    else
	echo "load_sample.sql" >> $working_dir/completed.txt
    fi
fi

grep "create_reference.sql" $working_dir/completed.txt > /dev/null 2>&1
if [ "$?" = "0" ]; then
    echo "create_reference.sql already run"
else
    echo "Run create_reference.sql"
    mysql --socket=$BASE/thesock -u root cnv < create_reference.sql
    if [[ $? -ne 0 ]] ; then
	echo "Run create_reference.sql failed" >&2
	mysqladmin --socket=$BASE/thesock shutdown -u root
	exit 1
    else
	echo "create_reference.sql" >> $working_dir/completed.txt
    fi
fi

grep "find_median.R" $working_dir/completed.txt > /dev/null 2>&1
if [ "$?" = "0" ]; then
    echo "find_median.R already run"
else
    echo "Run  find_median.R"
    R CMD BATCH find_median.R
    if [[ $? -ne 0 ]] ; then
	echo "Run find_median.R failed" >&2
	mysqladmin --socket=$BASE/thesock shutdown -u root
	exit 1
    else
	echo "find_median.R" >> $working_dir/completed.txt
    fi
fi

grep "create_tables_part1.sql" $working_dir/completed.txt > /dev/null 2>&1
if [ "$?" = "0" ]; then
    echo "create_tables_part1.sql already run"
else
    echo "Run  create_tables_part1.sql"
    mysql --socket=$BASE/thesock -u root cnv < create_tables_part1.sql
    if [[ $? -ne 0 ]] ; then
	echo "Run create_tables_part1.sql failed" >&2
	mysqladmin --socket=$BASE/thesock shutdown -u root
	exit 1
    else
	echo "create_tables_part1.sql" >> $working_dir/completed.txt
    fi
fi

grep "get_data.sql" $working_dir/completed.txt > /dev/null 2>&1
if [ "$?" = "0" ]; then
    echo "get_data.sql already run"
else
    echo "Run  get_data.sql"
    mysql --socket=$BASE/thesock -u root cnv < get_data.sql > sample_name_data.txt
    if [[ $? -ne 0 ]] ; then
        echo "Run get_data.sql failed" >&2
        mysqladmin --socket=$BASE/thesock shutdown -u root
        exit 1
    else
        echo "get_data.sql" >> $working_dir/completed.txt
    fi
fi

# SHUT DOWN MySQL
echo "Shutdown MySQL"
mysqladmin --socket=$BASE/thesock shutdown -u root
