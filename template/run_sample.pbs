#!/bin/bash                             
#PBS -l nodes=1:ppn=24,mem=62gb,walltime=48:00:00
#PBS -m abe
#PBS -M sample_email@umn.edu
#PBS -j oe
#PBS -N sample_name_cnv_analysis
#PBS -W group_list=thyagara

newgrp - thyagara

working_dir=sample_path
script_path=scripts_location
table_path=tables_path
MYSQL_LOAD_WAIT=120

cd $working_dir

# Load modules
module load bwa
module load bowtie
module load picard-tools
module load samtools
module load R/3.1.1

# Generate pileups for control
echo "Run control_pileup.sh"
sh control_pileup.sh 
if [[ $? -ne 0 ]] ; then
	echo "Run control_pileup.sh failed" >&2
	exit 1
fi

# Generate pileups for sample
echo "Run sample_pileup.sh"
sh sample_pileup.sh
if [[ $? -ne 0 ]] ; then
	echo "Run sample_pileup.sh failed" >&2
	exit 1
fi

# Untar MySQL source
mkdir src
cd src
tar xzvf ../../mysql-5.6.24-linux-glibc2.5-x86_64.tar.gz

# Setup the mysql data directory install 
mkdir $working_dir/mysql
cd $working_dir/src/mysql-5.6.24-linux-glibc2.5-x86_64/support-files
cp $working_dir/../my.cnf my-default.cnf
cd ..
rm -rf *.cnf
./scripts/mysql_install_db -datadir=$working_dir/mysql/data

# Alter PATH variable to know of mysql executables 
cd $working_dir
export PATH=$working_dir/bin:$working_dir/src/mysql-5.6.24-linux-glibc2.5-x86_64/bin:$PATH
BASE=$working_dir/mysql
mysql_socket=$BASE/thesock

mysqld --innodb-buffer-pool-size=40G --key-buffer-size=15G --innodb-log-file-size=5G \
--innodb_flush_log_at_trx_commit=2 --basedir=$BASE --datadir=$BASE/data --log-error=$BASE/data/mysql.err \
--pid-file=$BASE/mysql.pid --socket=$BASE/thesock --port=3306 \
--lc-messages-dir=$working_dir/src/mysql-5.6.24-linux-glibc2.5-x86_64/share/english --tmpdir=/scratch &

sleep $MYSQL_LOAD_WAIT

# CREATE DATABASE 
mysql --socket=$BASE/thesock -u root -e "CREATE DATABASE cnv;"

echo "Load tables"
mysql --socket=$BASE/thesock -u root cnv < $table_path/training_data.sql
mysql --socket=$BASE/thesock -u root cnv < $table_path/tso_data.sql
mysql --socket=$BASE/thesock -u root cnv < $table_path/tso_exon_60bp_segments_main_data.sql
mysql --socket=$BASE/thesock -u root cnv < $table_path/tso_exon_60bp_segments_pileup.sql
mysql --socket=$BASE/thesock -u root cnv < $table_path/tso_exon_60bp_segments_window_data.sql
mysql --socket=$BASE/thesock -u root cnv < $table_path/tso_exon_contig_pileup.sql
mysql --socket=$BASE/thesock -u root cnv < $table_path/tso_reference_exon.sql
mysql --socket=$BASE/thesock -u root cnv < $table_path/tso_reference.sql
mysql --socket=$BASE/thesock -u root cnv < $table_path/tso_windows_padded_pileup.sql

echo "Run load_control.sql"
mysql --socket=$BASE/thesock -u root cnv < load_control.sql
if [[ $? -ne 0 ]] ; then
        echo "Run load_control.sql failed" >&2
	mysqladmin --socket=$BASE/thesock shutdown -u root
        exit 1
fi

echo "Run load_sample.sql"
mysql --socket=$BASE/thesock -u root cnv < load_sample.sql 
if [[ $? -ne 0 ]] ; then
	echo "Run load_sample.sql failed" >&2
	mysqladmin --socket=$BASE/thesock shutdown -u root
	exit 1
fi

echo "Run create_reference.sql"
mysql --socket=$BASE/thesock -u root cnv < create_reference.sql
if [[ $? -ne 0 ]] ; then
	echo "create_reference.sql failed" >&2
	mysqladmin --socket=$BASE/thesock shutdown -u root
	exit 1
fi

echo "Run  find_median.R"
R CMD BATCH find_median.R
if [[ $? -ne 0 ]] ; then
	echo "find_median.R failed" >&2
	mysqladmin --socket=$BASE/thesock shutdown -u root
	exit 1
fi

echo "Run  create_tables_part1.sql"
mysql --socket=$BASE/thesock -u root cnv < create_tables_part1.sql
if [[ $? -ne 0 ]] ; then
    echo "create_tables_part1.sql failed" >&2
    mysqladmin --socket=$BASE/thesock shutdown -u root
    exit 1
fi

echo "Run normalize_coverage.R"
R CMD BATCH normalize_coverage.R
if [[ $? -ne 0 ]] ; then
    echo "normalize_coverage.R failed" >&2
    mysqladmin --socket=$BASE/thesock shutdown -u root
    exit 1
fi

echo "Run smooth_coverage.R"
R CMD BATCH smooth_coverage.R
if [[ $? -ne 0 ]] ; then
    echo "smooth_coverage.R failed" >&2
    mysqladmin --socket=$BASE/thesock shutdown -u root
    exit 1
fi


echo "Run get_three_ref.R"
R CMD BATCH get_three_ref.R
if [[ $? -ne 0 ]] ; then
    echo "get_three_ref.R failed" >&2
    mysqladmin --socket=$BASE/thesock shutdown -u root
    exit 1
fi

echo "Run  create_tables_ref_v1.sql"
mysql --socket=$BASE/thesock -u root cnv < create_tables_ref_v1.sql
if [[ $? -ne 0 ]] ; then
    echo "create_tables_ref_v1.sql failed" >&2
    mysqladmin --socket=$BASE/thesock shutdown -u root
    exit 1
fi

echo "Run create_tables_ref.R"
R CMD BATCH create_tables_ref.R
if [[ $? -ne 0 ]] ; then
    echo "create_tables_ref.R failed" >&2
    mysqladmin --socket=$BASE/thesock shutdown -u root
    exit 1
fi

echo "Run  create_tables_ref_v2.sql"
mysql --socket=$BASE/thesock -u root cnv < create_tables_ref_v2.sql
if [[ $? -ne 0 ]] ; then
    echo "create_tables_ref_v2.sql failed" >&2
    mysqladmin --socket=$BASE/thesock shutdown -u root
    exit 1
fi

echo "create coverage tables"
mysql --socket=$BASE/thesock -u root cnv < create_coverage.sql
if [[ $? -ne 0 ]] ; then
    echo "create_coverage.sql failed" >&2
    mysqladmin --socket=$BASE/thesock shutdown -u root
    exit >1
fi

echo "create sample coverage"
mysql --socket=$BASE/thesock -u root cnv < create_sample_coverage.sql
if [[ $? -ne 0 ]] ; then
    echo "create_sample_coverage.sql failed" >&2
    mysqladmin --socket=$BASE/thesock shutdown -u root
    exit 1
fi

echo "create control coverage"
mysql --socket=$BASE/thesock -u root cnv < create_control_coverage.sql
if [[ $? -ne 0 ]] ; then
    echo "create_control_coverage.sql failed" >&2
    mysqladmin --socket=$BASE/thesock shutdown -u root
    exit 1
fi

echo "create cnv_tables"
mysql --socket=$BASE/thesock -u root cnv < cnv_tables.sql
if [[ $? -ne 0 ]] ; then
    echo "cnv_tables.sql failed" >&2
    mysqladmin --socket=$BASE/thesock shutdown -u root
    exit 1
fi

echo "create cnv_tables_amplifications.sql"
mysql --socket=$BASE/thesock -u root cnv < cnv_tables_amplifications.sql
if [[ $? -ne 0 ]] ; then
    echo "cnv_tables_amplifications.sql failed" >&2
    mysqladmin --socket=$BASE/thesock shutdown -u root
    exit 1
fi

echo "Run get CNV perl scripts"
perl $script_path/get_cnv_tso.pl -s cnv_sample_name_over_control_name_joint_cov -e 2 -w 3 -cmin 0.3 -cmax 0.7 -o cnv_sample_name_heterozygous_mult -t "heterozygous" -h localhost -u root -d cnv -ms $mysql_socket
if [[ $? -ne 0 ]] ; then
    echo "get_cnv_tso.pl one failed" >&2
    mysqladmin --socket=$BASE/thesock shutdown -u root
    exit 1
fi
perl $script_path/get_cnv_tso.pl -s cnv_sample_name_over_control_name_joint_cov_oe -e 1 -w 3 -cmin 0.3 -cmax 0.7 -o cnv_sample_name_heterozygous_mult_oe -t "heterozygous" -h localhost -u root -d cnv -ms $mysql_socket
if [[ $? -ne 0 ]] ; then
    echo "get_cnv_tso.pl two failed" >&2
    mysqladmin --socket=$BASE/thesock shutdown -u root
    exit 1
fi
perl $script_path/get_cnv_tso.pl -s cnv_sample_name_over_control_name_joint_control -e 0 -w 3 -cmin 0 -cmax 0.2 -o cnv_sample_name_homozygous -t "homozygous" -h localhost -u root -d cnv -ms $mysql_socket
if [[ $? -ne 0 ]] ; then
    echo "get_cnv_tso.pl three failed" >&2
    mysqladmin --socket=$BASE/thesock shutdown -u root
    exit 1
fi

perl $script_path/get_cnv_tso.pl -s cnv_sample_name_over_control_name_joint_cov_amp -e 2 -w 3 -cmin 1.4 -cmax 10000 -o cnv_sample_name_amplification_mult_amp -t "amplification" -h localhost -u root -d cnv -ms $mysql_socket
if [[ $? -ne 0 ]] ; then
    echo "get_cnv_tso.pl four failed" >&2
    mysqladmin --socket=$BASE/thesock shutdown -u root
    exit 1
fi

perl $script_path/get_cnv_tso.pl -s cnv_sample_name_over_control_name_joint_cov_oe_amp -e 1 -w 3 -cmin 1.4 -cmax 10000 -o cnv_sample_name_amplification_mult_oe_amp -t "amplification" -h localhost -u root -d cnv -ms $mysql_socket
if [[ $? -ne 0 ]] ; then
    echo "get_cnv_tso.pl five failed" >&2
    mysqladmin --socket=$BASE/thesock shutdown -u root
    exit 1
fi

echo "get_cnv.sql"
mysql --socket=$BASE/thesock -u root cnv < get_cnv.sql
if [[ $? -ne 0 ]] ; then
    echo "get_cnv.sql failed" >&2
    mysqladmin --socket=$BASE/thesock shutdown -u root
    exit 1
fi

echo "ordered_genes.sql"
mysql --socket=$BASE/thesock -u root cnv < ordered_genes.sql
if [[ $? -ne 0 ]] ; then
    echo "ordered_genes.sql failed" >&2
    mysqladmin --socket=$BASE/thesock shutdown -u root
    exit 1
fi

echo "plot_script.pl"
perl $script_path/plot_script.pl -t cnv_sample_name_tso_over_control_name_n_bowtie_bwa_ratio_gene_out -s sample_name -c sample_name_tso_cnv -k cnv_sample_name_ordered_genes -h localhost -u root -d cnv -o plot_genes.R -ms $mysql_socket -a 0
if [[ $? -ne 0 ]] ; then
    echo "plot_script.pl failed" >&2
    mysqladmin --socket=$BASE/thesock shutdown -u root
    exit 1
fi

echo "plot_genes.R"
R CMD BATCH plot_genes.R
if [[ $? -ne 0 ]] ; then
    echo "plot_genes.R failed" >&2
    mysqladmin --socket=$BASE/thesock shutdown -u root
    exit 1
fi

echo "create_data.sql"
mysql --socket=$BASE/thesock -u root cnv < create_data.sql
if [[ $? -ne 0 ]] ; then
    echo "create_data.sql failed" >&2
    mysqladmin --socket=$BASE/thesock shutdown -u root
    exit 1
fi

_now=$(date +"%Y-%m-%d_%H-%M")

echo "get_machine_learning_data.sql"
mysql --socket=$BASE/thesock -u root cnv < get_machine_learning_data.sql > sample_name_raw_data_$_now.txt 
if [[ $? -ne 0 ]] ; then
    echo "get_machine_learning_data.sql failed" >&2
    mysqladmin --socket=$BASE/thesock shutdown -u root
    exit 1
fi

echo "get_machine_learning_data_amp.sql"
mysql --socket=$BASE/thesock -u root cnv < get_machine_learning_data_amp.sql > sample_name_raw_data_amp_$_now.txt
if [[ $? -ne 0 ]] ; then
    echo "get_machine_learning_data_amp.sql failed" >&2
    mysqladmin --socket=$BASE/thesock shutdown -u root
    exit 1
fi

echo "aggregate_window.R"
R CMD BATCH aggregate_window.R
if [[ $? -ne 0 ]] ; then
    echo "aggregate_window.R failed" >&2
    mysqladmin --socket=$BASE/thesock shutdown -u root
    exit 1
fi

echo "aggregate_window_amp.R"
R CMD BATCH aggregate_window_amp.R
if [[ $? -ne 0 ]] ; then
    echo "aggregate_window_amp.R failed" >&2
    mysqladmin --socket=$BASE/thesock shutdown -u root
    exit 1
fi

echo "combine_data.sql"
mysql --socket=$BASE/thesock -u root cnv < combine_data.sql
if [[ $? -ne 0 ]] ; then
    echo "combine_data.sql failed" >&2
    mysqladmin --socket=$BASE/thesock shutdown -u root
    exit 1
fi

echo "combine_data_amp.sql"
mysql --socket=$BASE/thesock -u root cnv < combine_data_amp.sql
if [[ $? -ne 0 ]] ; then
    echo "combine_data_amp.sql failed" >&2
    mysqladmin --socket=$BASE/thesock shutdown -u root
    exit 1
fi

echo "cnv_randomForest_predict.R"
R CMD BATCH cnv_randomForest_predict.R
if [[ $? -ne 0 ]] ; then
    echo "cnv_randomForest_predict.R failed" >&2
    mysqladmin --socket=$BASE/thesock shutdown -u root
    exit 1
fi

echo "cnv_randomForest_predict_amp.R"
R CMD BATCH cnv_randomForest_predict_amp.R
if [[ $? -ne 0 ]] ; then
    echo "cnv_randomForest_predict_amp.R failed" >&2
    mysqladmin --socket=$BASE/thesock shutdown -u root
    exit 1
fi

echo "get_predicted.sql"
mysql --socket=$BASE/thesock -u root cnv < get_predicted.sql > sample_name_predicted_$_now.txt 
if [[ $? -ne 0 ]] ; then
    echo "get_predicted.sql failed" >&2
    mysqladmin --socket=$BASE/thesock shutdown -u root
    exit 1
fi

echo "get_predicted_amp.sql"
mysql --socket=$BASE/thesock -u root cnv < get_predicted_amp.sql > sample_name_predicted_amp_$_now.txt
if [[ $? -ne 0 ]] ; then
    echo "get_predicted_amp.sql failed" >&2
    mysqladmin --socket=$BASE/thesock shutdown -u root
    exit 1
fi

echo "output.sql"
mysql --socket=$BASE/thesock -u root cnv < output.sql  > sample_name_cnv_$_now.txt
if [[ $? -ne 0 ]] ; then
    echo "output.sql failed" >&2
    mysqladmin --socket=$BASE/thesock shutdown -u root
    exit 1
fi
sed -e s,NULL,"\t",g < sample_name_cnv_$_now.txt > sample_name_cnv_$_now.txt.bak
mv sample_name_cnv_$_now.txt.bak sample_name_cnv_$_now.txt

# Raw data
if [ -s sample_name_raw_data_$_now.txt ]
then
    mv  sample_name_raw_data_$_now.txt archive_path/raw_data
    chmod 664 archive_path/raw_data/sample_name_raw_data_$_now.txt
else
    echo "sample_name_raw_data_$_now.txt is empty."
    # do something as file is empty 
fi

if [ -s sample_name_raw_data_amp_$_now.txt ]
then
    mv  sample_name_raw_data_amp_$_now.txt archive_path/raw_data
    chmod 664 archive_path/raw_data/sample_name_raw_data_amp_$_now.txt
else
    echo "sample_name_raw_data_amp_$_now.txt is empty."
    # do something as file is empty                                                                                                                                                                                                                          
fi


# Predicted
if [ -s sample_name_predicted_$_now.txt ]
then
    mv  sample_name_predicted_$_now.txt  archive_path/predicted_data
    chmod 664 archive_path/predicted_data/sample_name_predicted_$_now.txt
else
    echo "sample_name_predicted_$_now.txt is empty"
fi

if [ -s sample_name_predicted_amp_$_now.txt ]
then
    mv  sample_name_predicted_amp_$_now.txt  archive_path/predicted_data
    chmod 664 archive_path/predicted_data/sample_name_predicted_amp_$_now.txt
else
    echo "sample_name_predicted_amp_$_now.txt is empty"
fi


# Main calls
if [ -s sample_name_cnv_$_now.txt ]
then
     mv sample_name_cnv_$_now.txt archive_path/main_calls
     chmod 664 archive_path/main_calls/sample_name_cnv_$_now.txt
else 
     echo "sample_name_predicted_$_now.txt is empty"
fi

if [ -s sample_name_cnv_amp_$_now.txt ]
then
     mv sample_name_cnv_amp_$_now.txt archive_path/main_calls
     chmod 664 archive_path/main_calls/sample_name_cnv_amp_$_now.txt
else
     echo "sample_name_predicted_amp_$_now.txt is empty"
fi

# Plots
ls -1 *.png > /dev/null 2>&1
if [ "$?" = "0" ]; 
then
    mv *.png archive_path/plots
    chmod 664 archive_path/plots/*.png
else 
    echo "Plots not found"
fi

echo "plot_script.pl part 2"
perl $script_path/plot_script.pl -t cnv_sample_name_tso_over_control_name_n_bowtie_bwa_ratio_gene_out -s sample_name -c sample_name_tso_cnv -k cnv_sample_name_ordered_genes -h localhost -u root -d cnv -o plot_genes_ordered.R -ms $mysql_socket -a 1
if [[ $? -ne 0 ]] ; then
    echo "plot_script.pl part 2failed" >&2
    mysqladmin --socket=$BASE/thesock shutdown -u root
    exit 1
fi

echo "Move files"
mkdir -p scripts
ls -1 *.sh > /dev/null 2>&1
if [ "$?" = "0" ];
then
    mv *.sh scripts
else
    echo "sh files not found"
fi

ls -1 *.pbs > /dev/null 2>&1
if [ "$?" = "0" ];
then
    mv *.pbs scripts
else
    echo "pbs files not found"
fi

mkdir -p output

ls -1 *.txt > /dev/null 2>&1
if [ "$?" = "0" ];
then
    mv *.txt scripts
else
    echo "txt files not found"
fi

mkdir -p fastq
ls -1 *.fastq > /dev/null 2>&1
if [ "$?" = "0" ];
then
    mv *.fastq fastq
else
    echo "fastq files not found"
fi

echo "plot_genes_ordered.R"
R CMD BATCH plot_genes_ordered.R
if [[ $? -ne 0 ]] ; then
    echo "plot_genes_ordered.R failed" >&2
    mysqladmin --socket=$BASE/thesock shutdown -u root
    exit 1
fi

ls -1 *.R > /dev/null 2>&1
if [ "$?" = "0" ];
then
    mv *.R scripts
else
    echo "R files not found"
fi

ls -1 *.Rout > /dev/null 2>&1
if [ "$?" = "0" ];
then
    mv *.Rout scripts
else
    echo "Rout files not found"
fi

echo "get_ordered_genes.sql"
mysql --socket=$BASE/thesock -u root cnv < get_ordered_genes.sql  > sample_name_cnv_calls_on_ordered_genes_$_now.txt
if [[ $? -ne 0 ]] ; then
    echo "get_ordered_genes.sql failed" >&2
    mysqladmin --socket=$BASE/thesock shutdown -u root
    exit 1
fi

ls -1 *.sql > /dev/null 2>&1
if [ "$?" = "0" ];
then
    mv *.sql scripts
else
    echo "sql files not found"
fi

mysqldump --socket=$BASE/thesock -u root cnv  cnv_sample_name_over_control_name_joint_cov > cnv_sample_name_over_control_name_joint_cov.sql
mysqldump --socket=$BASE/thesock -u root cnv  cnv_sample_name_over_control_name_joint_cov_oe > cnv_sample_name_over_control_name_joint_cov_oe.sql
mysqldump --socket=$BASE/thesock -u root cnv  cnv_sample_name_over_control_name_joint_control > cnv_sample_name_over_control_name_joint_control.sql
mysqldump --socket=$BASE/thesock -u root cnv  cnv_sample_name_over_control_name_joint_cov_amp > cnv_sample_name_over_control_name_joint_cov_amp.sql
mysqldump --socket=$BASE/thesock -u root cnv  cnv_sample_name_over_control_name_joint_cov_oe_amp > cnv_sample_name_over_control_name_joint_cov_oe_amp.sql

mkdir -p cnv_calls_mysql_tables

ls -1 *.sql > /dev/null 2>&1
if [ "$?" = "0" ];
then
    mv *.sql cnv_calls_mysql_tables
else
    echo "sql files not found"
fi

# SHUT DOWN MySQL 
echo "Shutdown MySQL"                                                                                                                                               
mysqladmin --socket=$BASE/thesock shutdown -u root
